'use client';

import React, { useState, useCallback } from 'react';
import { Download, FileJson, FileText, X, Copy, Check } from 'lucide-react';
import { ValidationService } from '@/lib/services/ValidationService';
import { ValidationBadge } from '../validation/ValidationBadge';
import { cn } from '@/lib/utils';

interface ExportDialogProps {
  isOpen: boolean;
  onClose: () => void;
  data: any;
  presentationTitle?: string;
  className?: string;
}

type ExportFormat = 'json' | 'markdown';

export function ExportDialog({
  isOpen,
  onClose,
  data,
  presentationTitle = 'Untitled Presentation',
  className
}: ExportDialogProps) {
  const [exportFormat, setExportFormat] = useState<ExportFormat>('json');
  const [markdownTitle, setMarkdownTitle] = useState(presentationTitle);
  const [markdownDescription, setMarkdownDescription] = useState('');
  const [isValidating, setIsValidating] = useState(false);
  const [validationResult, setValidationResult] = useState<any>(null);
  const [isCopied, setIsCopied] = useState(false);
  const [fileName, setFileName] = useState('');

  const validationService = ValidationService.getInstance();

  // Validate data when dialog opens
  React.useEffect(() => {
    if (isOpen && data) {
      setIsValidating(true);
      const result = validationService.validateBatchUpdate(data);
      setValidationResult(result);
      setIsValidating(false);
      
      // Set default filename
      const timestamp = new Date().toISOString().split('T')[0];
      setFileName(`alkemy-gslide-export-${timestamp}`);
    }
  }, [isOpen, data]);

  const formatJson = useCallback((data: any): string => {
    return JSON.stringify(data, null, 2);
  }, []);

  const formatMarkdown = useCallback((data: any): string => {
    const timestamp = new Date().toISOString();
    const jsonContent = formatJson(data);
    
    return `# Alkemy GSlide Export (${timestamp})

## Slide Title: ${markdownTitle}

${markdownDescription ? `## Slide Description: ${markdownDescription}\n\n` : ''}## Google Slides batchUpdate JSON

\`\`\`json
${jsonContent}
\`\`\`

---

### Validation Status
- **Valid**: ${validationResult?.isValid ? 'Yes ✅' : 'No ❌'}
- **Errors**: ${validationResult?.errors?.length || 0}
- **Warnings**: ${validationResult?.warnings?.length || 0}

### Export Information
- **Exported At**: ${timestamp}
- **Operations Count**: ${data.requests?.length || 0}
- **Format Version**: 1.0

---

*Generated by Alkemy GSlide Editor*`;
  }, [markdownTitle, markdownDescription, formatJson, validationResult]);

  const getExportContent = useCallback((): string => {
    if (exportFormat === 'json') {
      return formatJson(data);
    } else {
      return formatMarkdown(data);
    }
  }, [exportFormat, data, formatJson, formatMarkdown]);

  const getFileName = useCallback((): string => {
    const extension = exportFormat === 'json' ? '.json' : '.md';
    return fileName + extension;
  }, [fileName, exportFormat]);

  const handleDownload = useCallback(async () => {
    const content = getExportContent();
    const blob = new Blob([content], { 
      type: exportFormat === 'json' ? 'application/json' : 'text/markdown' 
    });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = getFileName();
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    onClose();
  }, [getExportContent, getFileName, exportFormat, onClose]);

  const handleSaveAs = useCallback(async () => {
    if ('showSaveFilePicker' in window) {
      try {
        const options = {
          suggestedName: getFileName(),
          types: exportFormat === 'json' 
            ? [{
                description: 'JSON Files',
                accept: { 'application/json': ['.json'] }
              }]
            : [{
                description: 'Markdown Files',
                accept: { 'text/markdown': ['.md'] }
              }]
        };
        
        const handle = await (window as any).showSaveFilePicker(options);
        const writable = await handle.createWritable();
        await writable.write(getExportContent());
        await writable.close();
        
        onClose();
      } catch (error) {
        if ((error as Error).name !== 'AbortError') {
          console.error('Failed to save file:', error);
          // Fall back to regular download
          handleDownload();
        }
      }
    } else {
      // Browser doesn't support File System API, use regular download
      handleDownload();
    }
  }, [getExportContent, getFileName, exportFormat, onClose, handleDownload]);

  const handleCopyToClipboard = useCallback(async () => {
    const content = getExportContent();
    await navigator.clipboard.writeText(content);
    setIsCopied(true);
    setTimeout(() => setIsCopied(false), 2000);
  }, [getExportContent]);

  if (!isOpen) return null;

  const canExport = validationResult?.isValid || validationResult?.warnings?.length > 0;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center">
      {/* Backdrop */}
      <div 
        className="absolute inset-0 bg-black/50 backdrop-blur-sm"
        onClick={onClose}
      />

      {/* Dialog */}
      <div className={cn(
        'relative bg-card rounded-lg shadow-xl border w-full max-w-2xl max-h-[90vh] flex flex-col',
        className
      )}>
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b">
          <div>
            <h2 className="text-xl font-semibold">Export batchUpdate</h2>
            <p className="text-sm text-muted-foreground mt-1">
              Save your batchUpdate configuration
            </p>
          </div>
          <button
            onClick={onClose}
            className="p-2 rounded-lg hover:bg-black/5 dark:hover:bg-white/5 transition-colors"
            aria-label="Close dialog"
          >
            <X className="w-5 h-5" />
          </button>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-y-auto p-6 space-y-6">
          {/* Validation Status */}
          <div className="flex items-center gap-3">
            {isValidating ? (
              <ValidationBadge status="validating" size="md" />
            ) : validationResult ? (
              <ValidationBadge
                status={
                  !validationResult.isValid 
                    ? 'error' 
                    : validationResult.warnings.length > 0 
                    ? 'warning' 
                    : 'valid'
                }
                errorCount={validationResult.errors.length}
                warningCount={validationResult.warnings.length}
                size="md"
              />
            ) : null}
            
            {validationResult && !validationResult.isValid && (
              <p className="text-sm text-red-600 dark:text-red-400">
                Fix validation errors before exporting
              </p>
            )}
          </div>

          {/* Export Format Selection */}
          <div>
            <label className="text-sm font-medium mb-3 block">Export Format</label>
            <div className="grid grid-cols-2 gap-3">
              <button
                onClick={() => setExportFormat('json')}
                className={cn(
                  'p-4 rounded-lg border-2 transition-all',
                  exportFormat === 'json'
                    ? 'border-primary bg-primary/5'
                    : 'border-border hover:border-primary/50'
                )}
              >
                <FileJson className="w-8 h-8 mb-2 mx-auto text-primary" />
                <p className="font-medium">JSON</p>
                <p className="text-xs text-muted-foreground mt-1">
                  Clean batchUpdate array
                </p>
              </button>
              
              <button
                onClick={() => setExportFormat('markdown')}
                className={cn(
                  'p-4 rounded-lg border-2 transition-all',
                  exportFormat === 'markdown'
                    ? 'border-primary bg-primary/5'
                    : 'border-border hover:border-primary/50'
                )}
              >
                <FileText className="w-8 h-8 mb-2 mx-auto text-primary" />
                <p className="font-medium">Markdown</p>
                <p className="text-xs text-muted-foreground mt-1">
                  Documented with metadata
                </p>
              </button>
            </div>
          </div>

          {/* File Name */}
          <div>
            <label htmlFor="fileName" className="text-sm font-medium mb-2 block">
              File Name
            </label>
            <div className="flex gap-2">
              <input
                id="fileName"
                type="text"
                value={fileName}
                onChange={(e) => setFileName(e.target.value)}
                className="flex-1 px-3 py-2 rounded-lg border bg-background"
                placeholder="Enter file name"
              />
              <span className="px-3 py-2 rounded-lg bg-muted text-muted-foreground">
                {exportFormat === 'json' ? '.json' : '.md'}
              </span>
            </div>
          </div>

          {/* Markdown Options */}
          {exportFormat === 'markdown' && (
            <div className="space-y-4">
              <div>
                <label htmlFor="slideTitle" className="text-sm font-medium mb-2 block">
                  Slide Title
                </label>
                <input
                  id="slideTitle"
                  type="text"
                  value={markdownTitle}
                  onChange={(e) => setMarkdownTitle(e.target.value)}
                  className="w-full px-3 py-2 rounded-lg border bg-background"
                  placeholder="Enter slide title"
                />
              </div>
              
              <div>
                <label htmlFor="slideDescription" className="text-sm font-medium mb-2 block">
                  Slide Description (Optional)
                </label>
                <textarea
                  id="slideDescription"
                  value={markdownDescription}
                  onChange={(e) => setMarkdownDescription(e.target.value)}
                  className="w-full px-3 py-2 rounded-lg border bg-background min-h-[80px]"
                  placeholder="Enter slide description"
                />
              </div>
            </div>
          )}

          {/* Export Info */}
          <div className="p-4 bg-muted/50 rounded-lg">
            <p className="text-sm font-medium mb-2">Export Information</p>
            <div className="space-y-1 text-sm text-muted-foreground">
              <p>• {data.requests?.length || 0} batch update operations</p>
              <p>• Format: {exportFormat === 'json' ? 'JSON' : 'Markdown'}</p>
              <p>• File: {getFileName()}</p>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="flex items-center justify-between p-6 border-t">
          <button
            onClick={handleCopyToClipboard}
            className="flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-lg hover:bg-black/5 dark:hover:bg-white/5 transition-colors"
          >
            {isCopied ? (
              <>
                <Check className="w-4 h-4" />
                Copied!
              </>
            ) : (
              <>
                <Copy className="w-4 h-4" />
                Copy to Clipboard
              </>
            )}
          </button>
          
          <div className="flex items-center gap-3">
            <button
              onClick={onClose}
              className="px-4 py-2 text-sm font-medium rounded-lg hover:bg-black/5 dark:hover:bg-white/5 transition-colors"
            >
              Cancel
            </button>
            <button
              onClick={handleSaveAs}
              disabled={!canExport}
              className={cn(
                'flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-lg transition-colors',
                canExport
                  ? 'bg-primary text-primary-foreground hover:bg-primary/90'
                  : 'bg-muted text-muted-foreground cursor-not-allowed'
              )}
            >
              <Download className="w-4 h-4" />
              Export
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}